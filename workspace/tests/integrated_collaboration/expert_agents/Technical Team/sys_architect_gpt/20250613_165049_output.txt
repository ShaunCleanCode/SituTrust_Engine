As a System Architect, my main responsibility is to design an optimal technical architecture for our AI platform that ensures scalability. Here is a high-level overview of the proposed architecture:

1. **Data Layer**: This layer will be responsible for data storage and management. We'll use a combination of SQL and NoSQL databases based on the data type and access patterns. For structured data, we'll use PostgreSQL and for unstructured data like user interactions, we'll use MongoDB.

2. **Processing Layer**: This layer will be responsible for data processing and computation. We'll use Apache Spark for batch processing and Apache Flink for real-time processing. The machine learning algorithms will be implemented in this layer.

3. **AI Model Layer**: This layer will host our AI models. We'll use TensorFlow and PyTorch for building and training models. The models will be served using TensorFlow Serving and TorchServe.

4. **API Layer**: This layer will expose our AI functionality to the outside world. We'll build RESTful APIs using Node.js and Express.js. 

5. **Front-End Layer**: The user interface will be built using React.js due to its efficiency and flexibility.

6. **Infrastructure**: We'll host our platform on AWS due to its wide range of services and robustness. We'll use Docker for containerization and Kubernetes for orchestration to ensure scalability and resilience. 

7. **Security**: We'll implement standard security measures including encryption at rest and in transit, IAM, and VPCs for network isolation.

8. **Monitoring and Logging**: We'll use ELK stack for logging and Prometheus with Grafana for monitoring the system's health.

This design will ensure our AI platform is scalable, robust, and secure, capable of serving a growing user base and handling increased data volume and computational complexity.